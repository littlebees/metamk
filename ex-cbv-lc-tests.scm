(load "mk2.scm")
(load "utils.scm")
(load "vanilla.scm")
(load "meta.scm")
(load "ex-cbv-lc.scm")
(load "test-check.scm")

(test-check "1 CBV LC"
  (run* (q) (eval-expo '((lambda (x) (x x)) (lambda (x) x)) '() q))
  '((closure x x ())))

(test-check "2 CBV LC"
  (run 10 (q) (eval-expo q '() '(closure x x ())))
  '((lambda (x) x)
    (((lambda (_.0) _.0) (lambda (x) x)) (sym _.0))
    (((lambda (_.0) (_.0 _.0)) (lambda (x) x)) (sym _.0))
    (((lambda (_.0) _.0) ((lambda (_.1) _.1) (lambda (x) x)))
     (sym _.0 _.1))
    ((((lambda (_.0) _.0) (lambda (_.1) _.1)) (lambda (x) x))
     (sym _.0 _.1))
    (((lambda (_.0) ((lambda (_.1) _.1) _.0)) (lambda (x) x))
     (=/= ((_.0 lambda)))
     (sym _.0 _.1))
    (((lambda (_.0) (_.0 _.0))
      ((lambda (_.1) _.1) (lambda (x) x)))
     (sym _.0 _.1))
    (((lambda (_.0) ((lambda (_.1) _.0) _.0)) (lambda (x) x))
     (=/= ((_.0 _.1)) ((_.0 lambda)))
     (sym _.0 _.1))
    (((lambda (_.0) (_.0 _.0))
      ((lambda (_.1) (lambda (_.2) _.1)) (lambda (x) x)))
     (=/= ((_.1 _.2)) ((_.1 lambda)))
     (sym _.0 _.1 _.2))
    (((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
      (lambda (x) x))
     (=/= ((_.0 _.1)) ((_.0 lambda)))
     (sym _.0 _.1 _.2))))

(test-check "meta 1 CBV LC"
  (run* (q) ((vanilla lc-clause) `(eval-expo ((lambda (x) (x x)) (lambda (x) x)) () ,q)))
  '((closure x x ())))
